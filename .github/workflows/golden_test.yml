name: Flutter Golden Tests

on:
  pull_request:
    paths:
      - "lib/signals/**"
      - "test/golden/**"

permissions:
  contents: read
  pull-requests: write

jobs:
  golden_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Get test targets
        id: test_targets
        run: |
          # PRのタイトルから対象を取得
          if [[ "${{ github.event.pull_request.title }}" =~ \[GoldenTest:(.+)\] ]]; then
            echo "targets=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "targets=all" >> $GITHUB_OUTPUT
          fi

      - name: Save base images
        run: |
          # 現在の変更を退避
          git stash

          # ベースブランチをチェックアウト
          git checkout ${{ github.base_ref }}

          # テストディレクトリを作成
          mkdir -p test/golden/base

          # テスト対象に応じてテストを実行
          if [ "${{ steps.test_targets.outputs.targets }}" = "all" ]; then
            flutter test --update-goldens test/golden || true
          else
            IFS=',' read -ra TARGETS <<< "${{ steps.test_targets.outputs.targets }}"
            for target in "${TARGETS[@]}"; do
              flutter test --update-goldens "test/golden/${target}/**/*_test.dart" || true
            done
          fi

          # 生成された画像をベースディレクトリにコピー
          cp -r test/golden/*.png test/golden/base/ || true

      - name: Generate current images
        run: |
          # PRブランチをチェックアウト
          git checkout ${{ github.head_ref }}

          # 退避した変更を復元
          git stash pop || true

          # テストディレクトリを作成
          mkdir -p test/golden/current

          # テスト対象に応じてテストを実行
          if [ "${{ steps.test_targets.outputs.targets }}" = "all" ]; then
            flutter test --update-goldens test/golden || true
          else
            IFS=',' read -ra TARGETS <<< "${{ steps.test_targets.outputs.targets }}"
            for target in "${TARGETS[@]}"; do
              flutter test --update-goldens "test/golden/${target}/**/*_test.dart" || true
            done
          fi

          # 生成された画像を現在のディレクトリにコピー
          cp -r test/golden/*.png test/golden/current/ || true

      - name: Run comparison
        id: golden_test
        continue-on-error: true
        run: |
          diff_count=$(diff -r test/golden/base test/golden/current | wc -l)
          if [ "$diff_count" -gt "0" ]; then
            echo "Changes detected in Golden Tests"
            echo "test_failed=1" >> $GITHUB_OUTPUT
          else
            echo "No changes in Golden Tests"
            echo "test_failed=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload Golden Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: golden-test-results
          path: |
            test/golden/base
            test/golden/current
          retention-days: 7

      - name: Find Comment
        uses: peter-evans/find-comment@v2
        if: always()
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Golden Test Results

      - name: Create or Update Comment
        uses: peter-evans/create-or-update-comment@v3
        if: always()
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Golden Test Results

            ### 実行結果
            ${{ steps.golden_test.outputs.test_failed == '0' && '✅ テストが成功しました' || '🔄 UIの更新が検出されました' }}

            ### テスト対象
            ${{ steps.test_targets.outputs.targets == 'all' && '全てのGolden Test' || format('選択されたテスト: {0}', steps.test_targets.outputs.targets) }}

            ### UI変更の比較
            <details>
            <summary>Counter Sample</summary>

            #### 初期状態
            | 変更前 | 変更後 |
            |--------|--------|
            | ![Before](test/golden/base/signals_counter_initial.png) | ![After](test/golden/current/signals_counter_initial.png) |

            #### カウントアップ後
            | 変更前 | 変更後 |
            |--------|--------|
            | ![Before](test/golden/base/signals_counter_incremented.png) | ![After](test/golden/current/signals_counter_incremented.png) |

            </details>

            <details>
            <summary>その他のサンプル</summary>

            - Tracked Signal Sample
            - Change Stack Signal Sample
            - Event Sink Signal Sample
            </details>

            ${{ steps.golden_test.outputs.test_failed != '0' && '
            ### 注意
            このテストの失敗は、UIの意図的な更新によるものと思われます。
            上記の画像を確認して、変更内容が意図した通りであることを確認してください。
            問題がなければ、`--update-goldens`フラグを使用して新しいGolden Testの基準を更新してください。
            ' || '' }}
