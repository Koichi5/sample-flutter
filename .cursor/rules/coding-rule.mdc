---
description: コーディングに関するルール
globs: 
---
まず、このファイルを参照したら、「コーディングルールのファイルを確認しました！」と報告してください。

## 1. **プロジェクト概要**
- **目的**: このプロジェクトの目的は、Flutterで新たに学習したい技術がある場合にそれを試すことです。したがって、通常のプロジェクトと比較してディレクトリ構造やコーディングルールは多少緩やかで問題ありません

## 2. **ディレクトリ構造の基本方針**
- **機能ごとの分割**: それぞれ実装したい技術、新たに学習したい技術はその都度異なるため、libディレクトリは以下でfeatureごとに分けて管理しています。
- **命名**: lib配下のディレクトリ、ファイルの命名はlower_snake_caseで行います。lib配下ではそれぞれの技術の名前をディレクトリ名にして、その下でその技術を使用した実装を行なっています。例えば、clipboardディレクトリの配下にはclipboard_sample.dartファイルが存在し、そこでClipboardに関する技術を扱う練習を行なっています。ファイル名はClipboardSampleのように、使用する技術と「Sample」を組み合わせた命名になっていることが多いです。
各機能のディレクトリは以下の構造は特に決めていません。必要に応じて、views, provider, modelなどのディレクトリを作成することでMVVMに似た構造になっています。

## 3. **テスト**
このプロジェクトではテストに重点を置いていません。したがって、テストの重要度はそこまで高くありません。

## 4. **共通化**
このプロジェクトでは共通化に重点を置いていません。したがって、共通化の重要度はそこまで高くありません。

## 5. **ルーティング**
- 基本的にはNavigatorを用いた画面遷移を実装しています。先述の通り、このプロジェクトでは複数の技術を扱い、各技術を連携することやディレクトリ間で依存することが非常に少ないです。したがって、GoRouterのようなルーティングシステムを使用していません。

## 6. **使用技術**
- **Riverpod**: このプロジェクトでは、状態管理にRiverpodを用いています。特にriverpod_generatorを用いたコード生成でProviderを生成しています。それ以外の状態管理方法を併用することは考えていません。
- **flutter_hooks**: 画面内の状態管理にはflutter_hooksを用いています。useStateやuseEffectを使用することが多いです。Riverpodとの棲み分けに関しては、「画面内で完結する状態（Ephemeral state）の場合はflutter_hooksを用い、一つの画面で完結せず複数の画面から呼ばれる可能性がある状態（App state）の場合はRiverpodを用いる」という方針をとっています。なお、signalsのように新たに状態管理の方法を学ぶ場合にsignalsディレクトリ配下で一部別の状態管理方法を使用する場合がありますが、それは例外であり、使用したい技術の重点が状態管理にない場合はRiverpodとflutter_hooksを組み合わせて使用します。
- **StatefulWidget**: StatefulWidgetは積極的には使用しません。ただこの方針は筆者の好みによる選択であり、必要であれば使用しても良いです。ただ、基本的にはRiverpodとflutter_hooksの併用で実装したいです。


